@model WebFront.Models.ChessViewModel
@{
    ViewData["Title"] = "Magic Chess Board";
}

<h2 class="gameTitle">@ViewData["Title"]</h2>
<br />

<div class="row">
    <div class="col-md-2">
        <div class="user-div" id="player1Div" style="background: #f9ff00;">
            <img width="30" height="30" src="@Url.Content(Model.MainPlayer.UserIcon)" />
            <h3 id="mainPlayerName" style="margin-left:10px;margin-top: -5px;color:@(Model.MainPlayer.IsMyTurn?"blue":"black")">@Model.MainPlayer.Name</h3>
            <input type="hidden" id="mainPlayerTurn" value="@Model.MainPlayer.IsMyTurn" />
        </div>
        <div class="user-div" id="player2Div">
            <img width="30" height="30" src="@Url.Content(Model.OpponentPlayer.UserIcon)" />
            <h3 id="opponentPlayerName" style="margin-left:10px;margin-top: -5px;color:@(Model.OpponentPlayer.IsMyTurn?"blue":"black")">@Model.OpponentPlayer.Name</h3>
            <input type="hidden" id="opponentPlayerTurn" value="@Model.OpponentPlayer.IsMyTurn" />
        </div>
    </div>
    <div class="col-md-10">
        <div id="chessboard-container">
            @{
                int row = 1;
                for (int i = 0; i <= Model.RowSize; i++)
                {
                    <div class="chessboard-row">
                        @{
                            int col = 1;
                            foreach (var item in Model.Coins.Skip(i * 8).Take(8))
                            {
                                <div class="chessboard-cell player@((int)item.Type)">
                                    <img id="img_@(i)_@(col)_@(item.Number)_@((int)item.Type)" data-id="img_@(i)_@(col)_@(item.Number)_@((int)item.Type)" width="100" height="100" data-isexposed="0" data-next="@(item.ImgPath)" data-col="@col" data-row="@row" data-priority="@(item.Number)" data-player="@((int)item.Type)" data-current="@(Model.FlippedIconUrl)" src="@Url.Content(Model.FlippedIconUrl)" alt="Chess Piece" class="chess-piece ImgPlayer_@((int)item.Type)" />
                                </div>
                                col++;
                            }

                        }
                    </div>
                    row++;
                }
            }
        </div>
    </div>
</div>


<style>

    .gameTitle {
        border-bottom: 3px solid;
        text-align: center;
        padding-bottom: 8px;
        padding-top: 8px;
        background: #e0e0e0;
    }

    .emptyImg {
        width: 100px; /* Set a specific width */
        height: 100px; /* Set a specific height */
        background-color: lightgray; /* Set a background color */
        border: 1px solid black; /* Add a border for visibility */
    }


    .addBorders {
        border: 3px solid blue !important;
    }

    #chessboard-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .chessboard-row {
        display: flex;
        justify-content: center;
    }

    .user-div {
        display: flex;
        margin-top: 10px;
        height: 100px;
        align-items: center;
    }

    .chessboard-cell {
        border: 1px solid #000;
        box-sizing: border-box;
        cursor: pointer;
    }

    .player1 {
        background-color: #fff;
    }

    .player2 {
        background-color: #fff;
    }

</style>


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    $(document).ready(function () {

        $(document).on("click", ".chess-piece", function () {
            debugger;

            var mainPlayerTurn = $("#mainPlayerTurn").val();
            var opponentPlayerTurn = $("#opponentPlayerTurn").val();

            var currentUrl = $(this).attr("data-current");
            var nextUrl = $(this).attr("data-next");
            var player = $(this).attr("data-player");
            var isExposed = $(this).attr("data-isexposed");
            if (isExposed == "1") { // if already flipped

                var addBordersAlreadyApplied = $('.addBorders')[0];
                if (mainPlayerTurn == "value" && player == "1") { // valid main player move

                    if ($(this).hasClass("addBorders")) {
                        $('.addBorders').removeClass("addBorders");
                        return false; // remain on same player
                    }
                    else {
                        $('.addBorders').removeClass("addBorders");
                        $(this).addClass("addBorders");
                        return false; // remain on same player
                    }

                    ChangeTurn();
                    return false;
                }
                else if (opponentPlayerTurn == "value" && player == "2") { // valid oponent move

                    if ($(this).hasClass("addBorders")) {
                        $('.addBorders').removeClass("addBorders");
                        return false; // remain on same player
                    }
                    else {
                        $('.addBorders').removeClass("addBorders");
                        $(this).addClass("addBorders");
                        return false; // remain on same player
                    }

                    ChangeTurn();
                    return false;
                }
                else if (mainPlayerTurn == "value" && (player == "2" || player == "0")) { // main player trying to capture opponent
                    ValidateCaptureMove(this);
                    return false;
                }
                else if (opponentPlayerTurn == "value" && (player == "1" || player == "0")) { // opponent trying to capture main player
                    ValidateCaptureMove(this);
                    return false;
                }
                else {
                    return false;
                }

            }

            $(this).attr("data-current", nextUrl);
            $(this).attr("data-next", currentUrl);
            $(this).attr("src", nextUrl);
            $(this).attr("data-isexposed", "1");


            ChangeTurn();

        })

        function ValidateCaptureMove(This) {
            debugger;
            var addBordersAlreadyApplied = $('.addBorders')[0];
            var mainPlayerTurn = $("#mainPlayerTurn").val();
            var opponentPlayerTurn = $("#opponentPlayerTurn").val();

            var currentUrl = This.dataset.current;
            var nextUrl = This.dataset.next;
            var player = This.dataset.player;
            var isExposed = This.dataset.isexposed;

            if (addBordersAlreadyApplied != undefined) {
                if (This.classList.contains("addBorders")) {
                    $('.addBorders').removeClass("addBorders");
                    return false; // remain on same player
                }

                var opponentCellPriority = parseInt(This.dataset.priority);
                var mainCellPriority = parseInt(addBordersAlreadyApplied.dataset.priority);

                if (mainCellPriority >= opponentCellPriority
                    || mainCellPriority == 1 && opponentCellPriority == 7
                    || opponentCellPriority == 0) {

                    var sourceCol = parseInt(addBordersAlreadyApplied.dataset.col);
                    var sourceRow = parseInt(addBordersAlreadyApplied.dataset.row);
                    var targetCol = parseInt(This.dataset.col);
                    var targetRow = parseInt(This.dataset.row);

                    if (IsValidMove(sourceCol, sourceRow, targetCol, targetRow)) {
                        This.classList.remove('ImgPlayer_' + This.dataset.player);
                        This.src = addBordersAlreadyApplied.dataset.current;
                        This.dataset.player = addBordersAlreadyApplied.dataset.player;
                        This.dataset.priority = addBordersAlreadyApplied.dataset.priority;
                        This.dataset.next = addBordersAlreadyApplied.dataset.next;
                        This.dataset.isexposed = addBordersAlreadyApplied.dataset.isexposed;
                        This.dataset.current = addBordersAlreadyApplied.dataset.current;
                        $('.addBorders').removeClass("addBorders");
                        var playerId = addBordersAlreadyApplied.dataset.player;
                        This.classList.add('ImgPlayer_' + This.dataset.player);
                        ClearCell(addBordersAlreadyApplied.dataset.id);

                        if (mainCellPriority == @((int)enCoins.PAWN) && opponentCellPriority == @((int)enCoins.KING)) {
                            ShowWinAlert(playerId);
                            return false;
                        }

                        else if (mainCellPriority == @((int)enCoins.KING) && opponentCellPriority == @((int)enCoins.KING)) {
                            ShowWinAlert(playerId);
                            return false;
                        }

                        else if (!CheckIfOpponentCellRemaining(playerId)) {
                            ShowWinAlert(playerId);
                            return false;
                        }

                        ChangeTurn();
                        return false;
                    }
                    return false;
                }
                else {
                    $('.addBorders').removeClass("addBorders");
                    return false;
                }
            }
        }

        function ChangeTurn() {

            var mainPlayerTurn = $("#mainPlayerTurn").val();
            var opponentPlayerTurn = $("#opponentPlayerTurn").val();

            if (mainPlayerTurn == "value") {
                $("#mainPlayerTurn").val("");
                $("#opponentPlayerTurn").val("value");
                $("#mainPlayerName").css("color", "black");
                $("#opponentPlayerName").css("color", "blue");
                $("#player1Div").css("background", "transparent");
                $("#player2Div").css("background", "yellow");
            }
            else {
                $("#mainPlayerTurn").val("value");
                $("#opponentPlayerTurn").val("");
                $("#mainPlayerName").css("color", "blue");
                $("#opponentPlayerName").css("color", "black");
                $("#player2Div").css("background", "transparent");
                $("#player1Div").css("background", "yellow");
            }

            $('.addBorders').removeClass("addBorders");
        }

        function ClearCell(cellId) {
            var transparentImagePath = '/Content/Images/transparent.png';
            $('#' + cellId).attr("src", transparentImagePath);
            $('#' + cellId).attr("data-next", transparentImagePath);
            $('#' + cellId).attr("data-current", transparentImagePath);
            $('#' + cellId).attr("data-player", '0');
            $('#' + cellId).attr("data-priority", '0');
            $('#' + cellId).attr("data-isexposed", '1');
            $('#' + cellId).removeClass("ImgPlayer_1");
            $('#' + cellId).removeClass("ImgPlayer_2");
        }

        function IsValidMove(sourceCol, sourceRow, targetCol, targetRow) {
            // Check if capture is consecutive horizontally or vertically
            if ((Math.abs(sourceCol - targetCol) === 1 && sourceRow === targetRow) ||
                (Math.abs(sourceRow - targetRow) === 1 && sourceCol === targetCol)) {
                return true;
            } else {
                return false;
            }
        }

        function CheckIfOpponentCellRemaining(playerId) {
            var cellRemaining = $('.ImgPlayer_' + playerId)[0];
            if (cellRemaining != undefined) {
                return true;
            }
            else {
                return false;
            }
        }

        function ShowWinAlert(playerId) {
            if (playerId == 1) {
                var playername = $("#mainPlayerName").text();
                alert(playername + " WINS");
                location.reload();
            }
            else {
                var playername = $("#opponentPlayerName").text();
                alert(playername + " WINS");
                location.reload();
            }
        }

    })
</script>