@model WebFront.Models.ChessViewModel
@{
    ViewData["Title"] = "Magic Chess Board";
}

<h2 class="gameTitle">@ViewData["Title"]</h2>
<br />

<input type="hidden" id="TableId" value="@Model.TableId" />
<input type="hidden" id="SessionId" value="@Model.SessionId" />

<div class="row">
    <div class="col-md-2">
        <div class="user-div" id="player1Div" style="background: @(Model.MainPlayer.IsMyTurn?"yellow":"transparent")">
            <img width="30" height="30" src="@Url.Content(Model.MainPlayer.UserIcon)" />
            <h3 id="mainPlayerName" style="margin-left:10px;margin-top: -5px;">@Model.MainPlayer.Name</h3>
            <input type="hidden" id="mainPlayerTurn" value="@Model.MainPlayer.IsMyTurn" />
        </div>
        <div class="user-div" id="player2Div" style="background: @(Model.OpponentPlayer.IsMyTurn?"yellow":"transparent")">
            <img width="30" height="30" src="@Url.Content(Model.OpponentPlayer.UserIcon)" />
            <h3 id="opponentPlayerName" style="margin-left:10px;margin-top: -5px;">@Model.OpponentPlayer.Name</h3>
            <input type="hidden" id="opponentPlayerTurn" value="@Model.OpponentPlayer.IsMyTurn" />
        </div>
    </div>
    <div class="col-md-10">
        <div id="chessboard-container">
            @{
                if (Model.IsNewSession)
                {
                    int row = 1;
                    for (int i = 0; i <= Model.RowSize; i++)
                    {
                            <div class="chessboard-row">
                                @{
                                int col = 1;
                                foreach (var item in Model.Coins.Skip(i * 8).Take(8))
                                {
                                            <div class="chessboard-cell player@((int)item.Type)">
                                                <img id="img_@(i)_@(col)_@(item.Number)_@((int)item.Type)" data-id="img_@(i)_@(col)_@(item.Number)_@((int)item.Type)" width="100" height="100" data-isexposed="0" data-next="@(item.ImgPath)" data-col="@col" data-row="@row" data-priority="@(item.Number)" data-player="@((int)item.Type)" data-current="@(Model.FlippedIconUrl)" src="@Url.Content(Model.FlippedIconUrl)" alt="Chess Piece" class="chess-piece ImgPlayer_@((int)item.Type)" />
                                            </div>
                                    col++;
                                }

                                }
                            </div>
                        row++;
                    }
                }
                else
                {
                        @await Html.PartialAsync("ChessBoard", Model.ChessBoardHtml)
                }
            }
        </div>
    </div>
</div>

<audio id="audioPlayer1" src="/sounds/move-self.mp3"></audio>
<audio id="audioPlayer2" src="/sounds/move-check.mp3"></audio>
<audio id="audioVictory" src="/sounds/victory.mp3"></audio>

<script>
    $(document).ready(function () {

        $(document).on("click", ".chess-piece", function () {
            debugger;

            var mainPlayerTurn = $("#mainPlayerTurn").val();
            var opponentPlayerTurn = $("#opponentPlayerTurn").val();

            var currentUrl = $(this).attr("data-current");
            var nextUrl = $(this).attr("data-next");
            var player = $(this).attr("data-player");
            var isExposed = $(this).attr("data-isexposed");
            if (isExposed == "1") { // if already flipped

                var addBordersAlreadyApplied = $('.addBorders')[0];
                if (mainPlayerTurn == "value" && player == "1") { // valid main player move

                    if ($(this).hasClass("addBorders")) {
                        $('.addBorders').removeClass("addBorders");
                        return false; // remain on same player
                    }
                    else {
                        $('.addBorders').removeClass("addBorders");
                        $(this).addClass("addBorders");
                        return false; // remain on same player
                    }

                    ChangeTurn();
                    return false;
                }
                else if (opponentPlayerTurn == "value" && player == "2") { // valid oponent move

                    if ($(this).hasClass("addBorders")) {
                        $('.addBorders').removeClass("addBorders");
                        return false; // remain on same player
                    }
                    else {
                        $('.addBorders').removeClass("addBorders");
                        $(this).addClass("addBorders");
                        return false; // remain on same player
                    }

                    ChangeTurn();
                    return false;
                }
                else if (mainPlayerTurn == "value" && (player == "2" || player == "0")) { // main player trying to capture opponent
                    ValidateCaptureMove(this);
                    return false;
                }
                else if (opponentPlayerTurn == "value" && (player == "1" || player == "0")) { // opponent trying to capture main player
                    ValidateCaptureMove(this);
                    return false;
                }
                else {
                    return false;
                }

            }

            $(this).attr("data-current", nextUrl);
            $(this).attr("data-next", currentUrl);
            $(this).attr("src", nextUrl);
            $(this).attr("data-isexposed", "1");


            ChangeTurn();

        })

        function ValidateCaptureMove(This) {
            debugger;
            var addBordersAlreadyApplied = $('.addBorders')[0];
            var mainPlayerTurn = $("#mainPlayerTurn").val();
            var opponentPlayerTurn = $("#opponentPlayerTurn").val();

            var currentUrl = This.dataset.current;
            var nextUrl = This.dataset.next;
            var player = This.dataset.player;
            var isExposed = This.dataset.isexposed;

            if (addBordersAlreadyApplied != undefined) {
                if (This.classList.contains("addBorders")) {
                    $('.addBorders').removeClass("addBorders");
                    return false; // remain on same player
                }

                var opponentCellPriority = parseInt(This.dataset.priority);
                var mainCellPriority = parseInt(addBordersAlreadyApplied.dataset.priority);

                if (mainCellPriority >= opponentCellPriority
                    || mainCellPriority == 1 && opponentCellPriority == 7
                    || opponentCellPriority == 0) {

                    var sourceCol = parseInt(addBordersAlreadyApplied.dataset.col);
                    var sourceRow = parseInt(addBordersAlreadyApplied.dataset.row);
                    var targetCol = parseInt(This.dataset.col);
                    var targetRow = parseInt(This.dataset.row);

                    if (IsValidMove(sourceCol, sourceRow, targetCol, targetRow)) {
                        This.classList.remove('ImgPlayer_' + This.dataset.player);
                        This.src = addBordersAlreadyApplied.dataset.current;
                        This.dataset.player = addBordersAlreadyApplied.dataset.player;
                        This.dataset.priority = addBordersAlreadyApplied.dataset.priority;
                        This.dataset.next = addBordersAlreadyApplied.dataset.next;
                        This.dataset.isexposed = addBordersAlreadyApplied.dataset.isexposed;
                        This.dataset.current = addBordersAlreadyApplied.dataset.current;
                        $('.addBorders').removeClass("addBorders");
                        var playerId = addBordersAlreadyApplied.dataset.player;
                        This.classList.add('ImgPlayer_' + This.dataset.player);
                        ClearCell(addBordersAlreadyApplied.dataset.id);
                        capturePiece(This);
                        if (mainCellPriority == @((int)enCoins.PAWN) && opponentCellPriority == @((int)enCoins.KING)) {
                            ShowWinAlert(playerId);
                            return false;
                        }

                        else if (mainCellPriority == @((int)enCoins.KING) && opponentCellPriority == @((int)enCoins.KING)) {
                            ShowWinAlert(playerId);
                            return false;
                        }

                        else if (!CheckIfOpponentCellRemaining(playerId)) {
                            ShowWinAlert(playerId);
                            return false;
                        }

                        ChangeTurn();
                        return false;
                    }
                    return false;
                }
                else {
                    $('.addBorders').removeClass("addBorders");
                    return false;
                }
            }
        }

        function ChangeTurn() {
            var mainPlayerTurn = $("#mainPlayerTurn").val();
            var opponentPlayerTurn = $("#opponentPlayerTurn").val();
            $('.addBorders').removeClass("addBorders");

            if (mainPlayerTurn == "value") {
                $("#mainPlayerTurn").val("");
                $("#opponentPlayerTurn").val("value");
                $("#player1Div").css("background", "transparent");
                $("#player2Div").css("background", "yellow");
                UpdateSession(@((int)PlayerType.MAIN));
                var audio = $("#audioPlayer1")[0];
                audio.play();
            }
            else {
                $("#mainPlayerTurn").val("value");
                $("#opponentPlayerTurn").val("");
                $("#player2Div").css("background", "transparent");
                $("#player1Div").css("background", "yellow");
                UpdateSession(@((int)PlayerType.OPPONENT));
                var audio = $("#audioPlayer2")[0];
                audio.play();
            }
        }

        function capturePiece(piece) {
            var containerWidth = $(".chessboard-cell").width();
            var containerHeight = $(".chessboard-cell").height();

            var maxX = containerWidth - piece.width;
            var maxY = containerHeight - piece.height;

            var randomX = Math.floor(Math.random() * maxX);
            var randomY = Math.floor(Math.random() * maxY);

            piece.animate({
                left: randomX,
                top: randomY,
                opacity: 0
            }, 300, function () {
                piece.hide(); // Hide the piece after animation completes
            });
        }

        function ClearCell(cellId) {
            var transparentImagePath = '/Content/Images/transparent.png';
            $('#' + cellId).attr("src", transparentImagePath);
            $('#' + cellId).attr("data-next", transparentImagePath);
            $('#' + cellId).attr("data-current", transparentImagePath);
            $('#' + cellId).attr("data-player", '0');
            $('#' + cellId).attr("data-priority", '0');
            $('#' + cellId).attr("data-isexposed", '1');
            $('#' + cellId).removeClass("ImgPlayer_1");
            $('#' + cellId).removeClass("ImgPlayer_2");
        }

        function IsValidMove(sourceCol, sourceRow, targetCol, targetRow) {
            // Check if capture is consecutive horizontally or vertically
            if ((Math.abs(sourceCol - targetCol) === 1 && sourceRow === targetRow) ||
                (Math.abs(sourceRow - targetRow) === 1 && sourceCol === targetCol)) {
                return true;
            } else {
                return false;
            }
        }

        function CheckIfOpponentCellRemaining(playerId) {
            var cellRemaining = $('.ImgPlayer_' + playerId)[0];
            if (cellRemaining != undefined) {
                return true;
            }
            else {
                return false;
            }
        }

        function ShowWinAlert(playerId) {

            var audio = $("#audioVictory")[0];
            audio.play();

            if (playerId == 1) {
                var playername = $("#mainPlayerName").text();
                alert(playername + " WINS");
                // location.reload();
            }
            else {
                var playername = $("#opponentPlayerName").text();
                alert(playername + " WINS");
                //location.reload();
            }

        }

        function UpdateSession(playerId) {

            var sessionId = $("#SessionId").val();
            var chessBoardHtml = $("#chessboard-container").html();
            var tableId = $("#TableId").val();
            var mainPlayerId = $("#mainPlayerName").text();
            var opponentId = $("#opponentPlayerName").text();

            $.ajax({
                url: '@Url.Action("UpdateSession", "Home")',
                type: 'POST',
                data: {
                    Id: sessionId,
                    ChessBoardHtml: chessBoardHtml,
                    TableId: tableId,
                    MainPlayerId: mainPlayerId,
                    OpponentId: opponentId,
                    Turn: playerId
                },
                success: function (result) {
                    if (!result.isSuccess && result.isRedirect) {
                        window.location.href = result.redirectUrl;
                    }
                },
                error: function (xhr, status, error) {
                    // Handle the error response
                    //console.error(xhr.responseText);
                }
            });
        }

    })
</script>